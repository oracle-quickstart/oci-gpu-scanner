{{- if .Values.amdGpuExporter.enabled }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: amd-gpu-exporter
  namespace: {{ .Values.namespace.name }}
  labels:
    app: amd-gpu-exporter
    component: gpu-monitoring
spec:
  selector:
    matchLabels:
      app: amd-gpu-exporter
  template:
    metadata:
      labels:
        app: amd-gpu-exporter
        component: gpu-monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: amd.com/gpu
                operator: In
                values: ["true", "present"]
      
      volumes:
      - name: dri
        hostPath:
          path: /dev/dri
          type: Directory
      - name: sys
        hostPath:
          path: /sys
          type: Directory
      - name: proc
        hostPath:
          path: /proc
          type: Directory
      - name: var-lib-dpkg
        hostPath:
          path: /var/lib/dpkg
          type: Directory
      
      containers:
      - name: amd-gpu-exporter
        image: "{{ .Values.amdGpuExporter.image.repository }}:{{ .Values.amdGpuExporter.image.tag }}"
        imagePullPolicy: {{ .Values.amdGpuExporter.image.pullPolicy }}
        ports:
        - name: metrics
          containerPort: 5000
          protocol: TCP
        
        volumeMounts:
        - name: dri
          mountPath: /dev/dri
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: proc
          mountPath: /proc
          readOnly: true
        - name: var-lib-dpkg
          mountPath: /var/lib/dpkg
          readOnly: true
        
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - SYS_ADMIN
            - NET_ADMIN
        
        resources:
          {{- toYaml .Values.amdGpuExporter.resources | nindent 10 }}
        
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        env:
        - name: ROCR_VISIBLE_DEVICES
          value: "all"
        - name: HSA_OVERRIDE_GFX_VERSION
          value: "11.0.0"
      
      tolerations:
      - key: amd.com/gpu
        operator: Exists
        effect: NoSchedule
      
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: amd-gpu-exporter
  namespace: {{ .Values.namespace.name }}
  labels:
    app: amd-gpu-exporter
    component: gpu-monitoring
spec:
  selector:
    app: amd-gpu-exporter
  ports:
  - name: metrics
    port: 5000
    targetPort: 5000
    protocol: TCP
  type: ClusterIP
{{- end }}