{{- if .Values.metricsPushJob.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pushgateway-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: pushgateway-config
    component: monitoring
data:
  url: {{ .Values.global.pushGatewayUrl | quote }}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: metrics-push-job
  namespace: {{ .Values.namespace.name }}
  labels:
    app: metrics-push-job
    component: monitoring
spec:
  schedule: {{ .Values.metricsPushJob.schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: metrics-push-job
            component: monitoring
        spec:
          serviceAccountName: metrics-push-sa
          restartPolicy: OnFailure
          containers:
          - name: metrics-pusher
            image: curlimages/curl:latest
            command:
            - /bin/sh
            - -c
            - |
              #!/bin/sh
              set -e
              
              log() {
                echo "$(date '+%Y-%m-%d %H:%M:%S') [$$] $*"
              }
              
              handle_error() {
                log "ERROR: $1"
                exit 1
              }
              
              if [ -z "$PUSHGATEWAY_URL" ]; then
                handle_error "PUSHGATEWAY_URL environment variable is not set"
              fi
              
              log "Starting metrics collection and push..."
              log "Push Gateway URL: $PUSHGATEWAY_URL"
              
              NODE_NAME=${NODE_NAME:-$(hostname)}
              log "Node Name: $NODE_NAME"
              
              push_metrics() {
                local job_name="$1"
                local metrics="$2"
                local instance_name="$3"
                
                if [ -z "$metrics" ]; then
                  log "Warning: No metrics data for $job_name"
                  return 1
                fi
                
                local push_url="${PUSHGATEWAY_URL%/}/metrics/job/${job_name}/instance/${instance_name}"
                log "Pushing $job_name metrics to: $push_url"
                
                if echo "$metrics" | curl -k --connect-timeout 10 --max-time 30 --data-binary @- "$push_url" 2>/dev/null; then
                  log "$job_name metrics pushed successfully"
                  return 0
                else
                  log "ERROR: Failed to push $job_name metrics"
                  return 1
                fi
              }
              
              log "Checking for AMD GPU exporter..."
              if curl -s --connect-timeout 5 --max-time 10 "http://localhost:5000/metrics" > /dev/null 2>&1; then
                log "AMD GPU exporter found, collecting metrics..."
                AMD_METRICS=$(curl -s --connect-timeout 5 --max-time 10 "http://localhost:5000/metrics" 2>/dev/null || echo "")
                push_metrics "amd-gpu-exporter" "$AMD_METRICS" "$NODE_NAME"
              else
                log "AMD GPU exporter not available on this node (port 5000 not responding)"
              fi
              
              log "Checking for Node Exporter..."
              if curl -s --connect-timeout 5 --max-time 10 "http://localhost:9100/metrics" > /dev/null 2>&1; then
                log "Node Exporter found, collecting metrics..."
                NODE_METRICS=$(curl -s --connect-timeout 5 --max-time 10 "http://localhost:9100/metrics" 2>/dev/null || echo "")
                push_metrics "node-exporter" "$NODE_METRICS" "$NODE_NAME"
              else
                log "Node Exporter not available on this node (port 9100 not responding)"
              fi
              
              log "Metrics collection and push completed successfully"
            env:
            - name: PUSHGATEWAY_URL
              valueFrom:
                configMapKeyRef:
                  name: pushgateway-config
                  key: url
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            resources:
              {{- toYaml .Values.metricsPushJob.resources | nindent 14 }}
            securityContext:
              runAsNonRoot: true
              runAsUser: 1000
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          hostNetwork: true
          nodeSelector:
            kubernetes.io/arch: amd64
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: amd.com/gpu
                    operator: In
                    values: ["true", "present"]
          tolerations:
          - key: amd.com/gpu
            operator: Exists
            effect: NoSchedule
          - key: nvidia.com/gpu
            operator: Exists
            effect: NoSchedule
{{- end }}